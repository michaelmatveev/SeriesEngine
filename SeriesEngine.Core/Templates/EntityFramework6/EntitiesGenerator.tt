<#@ include file="ObjectVariableTemplate.tt" #>
<#@ include file="ObjectEntityTemplate.tt" #>
<#@ include file="HierarchyTemplate.tt" #>
<#@ include file="HierarchyNodeTemplate.tt" #>
<#@ include file="BaseContextPartialTemplate.tt" #>
<#@ include file="DbContextTemplate.tt" #>
<#+
// <copyright file="EntitiesGenerator.tt" company="">
//  Copyright © Michael Matveev. All Rights Reserved.
// </copyright>

public class EntitiesGenerator : Generator
{
	public XDocument DataTypesDoc;
	public XDocument ComponentsDoc;
	public XDocument HierarchiesDoc;
	public XDocument ModelDoc;

	protected override void RunCore()
	{
		Dictionary<String, XElement> dataTypes = DataTypesDoc.Root.Elements().ToDictionary(x => x.Attribute("Name").Value, x => x);
		String prefix = ModelDoc.Root.Attribute("Prefix").Value;

		ObjectEntityTemplate objectEntityTemplate = new ObjectEntityTemplate 
		{
			Schema = prefix,
			DataTypes = dataTypes
		};
		
		ObjectVariableTemplate objectVariableTemplate = new ObjectVariableTemplate 
		{
			Schema = prefix
		};

		foreach(XElement stereotypeElement in ComponentsDoc.Descendants("Stereotype")) 
		{
			var objectName = stereotypeElement.Attribute("Name").Value;
			var output = String.Format("{0}.{1}.cs", prefix, objectName);
			 
			objectEntityTemplate.Stereotype = stereotypeElement;
			objectEntityTemplate.RenderToFile(output);

			foreach(XElement variableElement in 
				stereotypeElement
				.Elements("Variable")
				.Where(v => v.Attribute("Versioned")?.Value == "True"))
			{
				var varName = variableElement.Attribute("Name").Value;
				var typeName = variableElement.Attribute("DataType").Value;
				var varType = dataTypes[typeName].Attribute("ClrType").Value;
				output = String.Format("{0}.{1}_{2}.cs", prefix, objectName, varName);
				var isPeriodic = variableElement.Attribute("Period") != null;

				objectVariableTemplate.Stereotype = objectName;
				objectVariableTemplate.Variable = variableElement;
				objectVariableTemplate.VarType = varType;
				objectVariableTemplate.BaseType = isPeriodic ? "PeriodVariable" : "VersionedVariable";

				objectVariableTemplate.RenderToFile(output);
			}
		}

		var hierarchyTemplate = new HierarchyTemplate 
		{
			Schema = prefix
		};

		var hierarchyNodeTemplate = new HierarchyNodeTemplate 
		{
			Schema = prefix
		};
		
		foreach(XElement hierarchyElement in HierarchiesDoc.Descendants("Hierarchy"))
		{
			hierarchyTemplate.Hierarchy = hierarchyElement;

			var hName = hierarchyElement.Attribute("Name").Value;
			var hierarhyOutput = String.Format("{0}.{1}Network.cs", prefix, hName);
			hierarchyTemplate.RenderToFile(hierarhyOutput);

			hierarchyNodeTemplate.Hierarchy = hierarchyElement;
			var hierarhyNodeOutput = String.Format("{0}.{1}Node.cs", prefix, hName);
			hierarchyNodeTemplate.RenderToFile(hierarhyNodeOutput);
		}

		var baseContextPartialTemplate = new BaseContextPartialTemplate 
		{
			Schema = prefix,
			Hierarchies = HierarchiesDoc.Descendants("Hierarchy")
		};
		var baseOutput = String.Format("{0}.BaseModelContext1.cs", prefix);
		baseContextPartialTemplate.RenderToFile(baseOutput);

		var dbContextTemplate = new DbContextTemplate 
		{
			Schema = prefix,
			Hierarchies = HierarchiesDoc.Descendants("Hierarchy"),
			Stereotypes = ComponentsDoc.Descendants("Stereotype")
		};
		var contextOutput = String.Format("{0}.Model.cs", prefix);
		dbContextTemplate.RenderToFile(contextOutput);

	}
}
#>
