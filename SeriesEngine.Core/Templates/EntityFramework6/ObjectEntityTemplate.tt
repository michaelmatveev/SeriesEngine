<#+
// <copyright file="HeaderTemplate.tt" company="Michael Matveev">
//  Copyright © Michael Matveev. All Rights Reserved.
// </copyright>

public class ObjectEntityTemplate : CSharpTemplate
{
	public string Schema;
	public XElement Stereotype;
	public Dictionary<String, XElement> DataTypes;

	public override string TransformText()
	{
		base.TransformText();
		string name = Stereotype.Attribute("Name").Value;
		VariableSelector vs = new VariableSelector(this.Stereotype);
#>
using System;
using SeriesEngine.Core.DataAccess;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace SeriesEngine.<#= Schema #>
{
    [Table("<#= Schema #>.<#= name #>s")]
	public partial class <#= name #> : NamedObject
	{
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public <#= name #>() : base(<#= Schema #>Objects.<#= name #>)
        {
<#+
		foreach(var varElement in vs.QueryVariablesThat().Versioned().Variables)
		{
			var varName = varElement.Attribute("Name").Value;
#>
			<#= name #>_<#= varName#>s = new HashSet<<#= name #>_<#= varName#>>();
<#+
		}
#>
		}

        public override string GetName()
        {
            return Name;
        }

        public override void SetName(string newName)
        {
            Name = newName;
        }
<#+
		foreach(var varElement in vs.QueryVariablesThat().NotVersioned().Variables.Where(v => v.Attribute("Name").Value != "Name"))			
		{
			var varName = varElement.Attribute("Name").Value;
			var typeName = varElement.Attribute("DataType").Value;
			var type = DataTypes[typeName].Attribute("ClrType").Value;
			var optional = varElement.Attribute("Optional")?.Value == "True";
#>
	
<#+
			if(!optional)
			{
#>
        [Required]
<#+
			}
#>
        //[StringLength(int.MaxValue)]
        //[MaxLength]
        public <#= type #> <#= varName #> { get; set; }
		public static bool <#= varName #>Setter(NamedObject obj, string value) 
		{
			var target = (<#= name #>)obj;

<#+			if(type == "String")
			{
#>
			if(target.<#= varName #> != value) 
			{
				target.<#= varName #> = value;
				return true;
			}
			return false;
<#+
			}
			else
			{
#>
			<#= type #> newValue;
			if(<#= type #>.TryParse(value, out newValue)) 
			{
				if(target.<#= varName #> != newValue)
				{
					target.<#= varName #> = newValue;
					return true;
				}				
				return false;			
			}
			throw new Exception("Cannot cast variable");
<#+
			}
#>
		}
<#+
		}
		foreach(var varElement in vs.QueryVariablesThat().Versioned().Variables)
		{
			var varName = varElement.Attribute("Name").Value;
#>

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<<#= name #>_<#= varName#>> <#= name #>_<#= varName#>s { get; set; }
		public static bool <#= varName #>Setter(NamedObject obj, string value) 
		{
			var target = (<#= name #>)obj;
			return false;
		}
<#+
		}
#>
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
