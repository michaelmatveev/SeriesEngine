<#+
// <copyright file="HierarchyModelTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class HierarchyModelTemplate : CSharpTemplate
{
	public string Schema;
	public IEnumerable<XElement> Hierarchies;

	public override string TransformText()
	{
		base.TransformText();
#>
using SeriesEngine.Core;
using SeriesEngine.Core.DataAccess;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.Entity.Infrastructure;
using System.Linq;

namespace SeriesEngine.<#= Schema #>
{
    public static class <#= Schema #>Hierarchies
    {
        public static IEnumerable<HierarchyMemamodel> UsedHierarchies
        {
			get
			{
<#+
		foreach(var h in Hierarchies)
		{
			var s = h.Attribute("Name").Value;
#>
				yield return <#= s #>;
<#+
		}
#>
			}
		}
<#+
		foreach(var h in Hierarchies)
		{
			var s = h.Attribute("Name").Value;
			var objs = h.Descendants("UsedStereotype").Select(v => v.Attribute("Name").Value);
			var sysnets = h.Elements("Network").Select(v => v.Attribute("Name").Value);
#>

        public static HierarchyMemamodel <#= s #> = new HierarchyMemamodel
        {
            Name = "<#= s #>",
			ModelName = "<#= Schema #>",
            ReferencedObjects = new [] 
			{
<#+
			foreach(var o in objs)
			{
#>				<#= Schema #>Objects.<#= o #>,
<#+
			}
#>
			},
			SystemNetworks = new string [] 
			{
<#+
			foreach(var n in sysnets)
			{
#>				"<#= n #>",
<#+
			}
#>
			},
			NodeType = typeof(SeriesEngine.<#= Schema #>.<#= s #>Node),
			HierarchyType = typeof(SeriesEngine.<#= Schema #>.<#= s #>Network),
			DataLoader = new Action<BaseModelContext, DbDataReader>((c, r) => ((IObjectContextAdapter)c).ObjectContext.Translate<<#= s #>Node>(r, "<#= s #>Nodes", System.Data.Entity.Core.Objects.MergeOption.AppendOnly).ToList())
        };
<#+
		}
#>
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
