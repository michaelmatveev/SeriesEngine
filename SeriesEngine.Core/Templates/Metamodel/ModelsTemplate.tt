<#+
// <copyright file="ModelsTemplate.tt" company="">
//  Copyright © Michael Matveev. All Rights Reserved.
// </copyright>

public class ModelsTemplate : CSharpTemplate
{
	public IEnumerable<XElement> Models;

	private string GetPrefix(XElement model)
	{
		return model.Attribute("Prefix").Value;
	}

	private string IsVisible(XElement model)
	{
		return model.Attribute("Visible").Value.ToLower();
	}

	public override string TransformText()
	{
		base.TransformText();
#>
using System;
using System.Collections.Generic;
using SeriesEngine.Core.DataAccess;
<#+
		foreach(var m in Models)
		{
#>
using SeriesEngine.<#= GetPrefix(m) #>;
<#+
		}
#>

namespace SeriesEngine.Core
{
	public static class ModelsDescription
	{
        public static IEnumerable<MetaModel> All
        {
            get
            {
<#+
		foreach(var m in Models)
		{
#>
                yield return <#= GetPrefix(m) #>;
<#+
		}
#>
            }
        }

<#+
		foreach(var m in Models)
		{
#>
        public static MetaModel <#= GetPrefix(m) #> = new MetaModel
        {
            Name = "<#= GetPrefix(m) #>",
			Visible = <#= IsVisible(m) #>,
            ObjectModels = <#= GetPrefix(m) #>Objects.UsedObjects,
			HierarchyModels = <#= GetPrefix(m) #>Hierarchies.UsedHierarchies
        };
<#+
		}
#>

        public static BaseModelContext GetModel(string modelName = null)
        {
			if(string.IsNullOrEmpty(modelName))
			{
<#+
		var firstModel = GetPrefix(Models.First());
#>
				return new SeriesEngine.<#= firstModel #>.Model1();
			}

<#+
		foreach(var m in Models)
		{
#>
			if(modelName == "<#= GetPrefix(m) #>")
            {
                return new SeriesEngine.<#= GetPrefix(m) #>.Model1();
            }
<#+
		}
#> 
            throw new NotSupportedException();
        }		
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
