<#+
// <copyright file="VariableTemplate.tt" company="">
//  Copyright © Michael Matveev. All Rights Reserved.
// </copyright>

public class VariableTemplate : CSharpTemplate
{
	public string Schema;
	public string Stereotype;
	public IEnumerable<XElement> Variables;
	public Dictionary<String, XElement> DataTypes;

	public override string TransformText()
	{
		base.TransformText();
		var vars = Variables.Where(v => v.Attribute("Name").Value != "Name");
		var noVariables = !vars.Any();
#>
using System;
using System.Collections.Generic;
using SeriesEngine.Core;

namespace SeriesEngine.<#= Schema #>
{
	public class <#= Schema #><#= Stereotype #>Variables
	{
<#+		if(noVariables)
		{
#>
        public static IEnumerable<Variable> AllVariables
        {
            get
            {
                yield break;
            }
        }
<#+
		}
		else
		{
#>
        public static IEnumerable<Variable> AllVariables
        {
            get
            {
<#+
			foreach(var v in vars) 
			{
				var name = v.Attribute("Name").Value;
#>
				yield return <#= name #>;
<#+
			}
#>
            }
        }
<#+
		}

		foreach(var v in vars)
		{
			var name = v.Attribute("Name").Value;
			bool isPeriodic = v.Attribute("Period") != null;
			var typeName = v.Attribute("DataType").Value;
			var type = DataTypes[typeName].Attribute("ClrType").Value;

			bool isVersioned;
			if(!Boolean.TryParse(v.Attribute("Versioned")?.Value, out isVersioned)) 
			{
				isVersioned = false;
			}

#>

		public static Variable <#= name #> = new Variable(<#= Stereotype #>.<#= name #>Parser)
        {
			ObjectName = "<#= Stereotype #>",
			Name = "<#= name #>",
			IsPeriodic = <#= isPeriodic.ToString().ToLower() #>,
			IsVersioned = <#= isVersioned.ToString().ToLower() #>,
			ValueType = typeof(<#= type #>),
<#+
			if(isPeriodic)
			{
#>
			EntityType = typeof(<#= Stereotype#>_<#= name #>)
<#+
			}
#>
		};
<#+
		}
#>
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
