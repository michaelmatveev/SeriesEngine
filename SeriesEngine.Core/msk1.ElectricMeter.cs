// <autogenerated>
//   This file was generated by T4 code generator BuildMetamodels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using SeriesEngine.Core.DataAccess;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace SeriesEngine.msk1
{
    [Table("msk1.ElectricMeters")]
	public partial class ElectricMeter : NamedObject
	{
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public ElectricMeter() : base(msk1Objects.ElectricMeter)
        {
			ElectricMeter_Directions = new HashSet<ElectricMeter_Direction>();
			ElectricMeter_Integrals = new HashSet<ElectricMeter_Integral>();
		}

        public override string GetName()
        {
            return Name;
        }

        public override void SetName(string newName)
        {
            Name = newName;
        }
	
        [Required]
        //[StringLength(int.MaxValue)]
        //[MaxLength]
        public String PUType { get; set; }
		public static bool PUTypeSetter(NamedObject obj, string value) 
		{
			var target = (ElectricMeter)obj;

			if(target.PUType != value) 
			{
				target.PUType = value;
				return true;
			}
			return false;
		}
	
        [Required]
        //[StringLength(int.MaxValue)]
        //[MaxLength]
        public Boolean HourCount { get; set; }
		public static bool HourCountSetter(NamedObject obj, string value) 
		{
			var target = (ElectricMeter)obj;

			Boolean newValue;
			if(Boolean.TryParse(value, out newValue)) 
			{
				if(target.HourCount != newValue)
				{
					target.HourCount = newValue;
					return true;
				}				
				return false;			
			}
			throw new Exception("Cannot cast variable");
		}
	
        [Required]
        //[StringLength(int.MaxValue)]
        //[MaxLength]
        public String Class { get; set; }
		public static bool ClassSetter(NamedObject obj, string value) 
		{
			var target = (ElectricMeter)obj;

			if(target.Class != value) 
			{
				target.Class = value;
				return true;
			}
			return false;
		}

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ElectricMeter_Direction> ElectricMeter_Directions { get; set; }
		public static bool DirectionSetter(NamedObject obj, string value) 
		{
			var target = (ElectricMeter)obj;
			return false;
		}

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ElectricMeter_Integral> ElectricMeter_Integrals { get; set; }
		public static bool IntegralSetter(NamedObject obj, string value) 
		{
			var target = (ElectricMeter)obj;
			return false;
		}
	}
}
