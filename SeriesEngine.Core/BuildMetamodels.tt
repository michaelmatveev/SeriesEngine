<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="txt" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Templates\MsSqlServer\CreateDatabaseGenerator.tt" #>
<#@ include file="Templates\EntityFramework6\EntitiesGenerator.tt" #>
<#@ include file="Templates\EntityFramework6\BaseContextGenerator.tt" #>
<#@ include file="Templates\Metamodel\ConstantsGenerator.tt" #>
<#@ include file="Templates\Metamodel\ModelGenerator.tt" #>
This scripts creates an SQL script to create database schema from scratch 
<#
// <copyright file="BuildMetamodelScript.tt" company="">
//  Copyright Â© Michael Matveev. All Rights Reserved.
// </copyright>

	var metaModelsPath = this.Host.ResolvePath(@"Metamodels");
	var dataTypesPath = this.Host.ResolvePath(@"Metamodels\DataTypes\MsSqlServer.xml");
	var dataTypes = XDocument.Load(dataTypesPath);
	var prefixes = new List<XElement>();
	
	foreach(var modelPath in Directory
		.GetDirectories(metaModelsPath)
		.Where(d => !d.EndsWith("DataTypes")))
	{
		var model = Path.GetFileName(modelPath);
		var outputFile = String.Format("CreateDatabaseSchema.{0}.sql", model);
		var components = XDocument.Load(modelPath + @"\Components.xml");
		var hierarchies = XDocument.Load(modelPath + @"\DataStructures.xml");
		var modelDescription = XDocument.Load(modelPath + @"\Model.xml");
		prefixes.Add(modelDescription.Root);

		var dbGenerator = new CreateDataBaseGenerator
		{
			Output = outputFile,
			DataTypesDoc = dataTypes,
			ComponentsDoc = components,
			HierarchiesDoc = hierarchies,
			ModelDoc = modelDescription
		};
		dbGenerator.Run();

		var efGenerator = new EntitiesGenerator
		{
			DataTypesDoc = dataTypes,
			ComponentsDoc = components,
			HierarchiesDoc = hierarchies,
			ModelDoc = modelDescription
		};
		efGenerator.Run();

		var cnsGenerator = new ConstantsGenerator 
		{
			DataTypesDoc = dataTypes,
			ComponentsDoc = components,
			HierarchiesDoc = hierarchies,
			ModelDoc = modelDescription
		};
		cnsGenerator.Run();
#>
The '<#= model #>' model has been created successfully.
<#
	}

	var baseGenerator = new BaseContextGenerator 
	{
		Prefixes = prefixes.Select(m => m.Attribute("Prefix").Value)
	};
	baseGenerator.Run();

	var modelGenerator = new ModelGenerator 
	{
		ModelElements = prefixes
	};
	modelGenerator.Run();
#>