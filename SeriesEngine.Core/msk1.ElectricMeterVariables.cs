// <autogenerated>
//   This file was generated by T4 code generator BuildMetamodels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using SeriesEngine.Core;

namespace SeriesEngine.msk1
{
	public class msk1ElectricMeterVariables
	{
        public static IEnumerable<Variable> AllVariables
        {
            get
            {
				yield return PUType;
				yield return HourCount;
				yield return Class;
				yield return Direction;
				yield return Integral;
				yield return CoeffOfTransformation;
				yield return AdditionInPercent;
				yield return Addition;
				yield return Odn;
            }
        }

		public static Variable PUType = new Variable(ElectricMeter.PUTypeParser)
        {
			Name = "PUType",
			IsPeriodic = false,
			IsVersioned = false,
			ValueType = typeof(String),
		};

		public static Variable HourCount = new Variable(ElectricMeter.HourCountParser)
        {
			Name = "HourCount",
			IsPeriodic = false,
			IsVersioned = false,
			ValueType = typeof(Boolean),
		};

		public static Variable Class = new Variable(ElectricMeter.ClassParser)
        {
			Name = "Class",
			IsPeriodic = false,
			IsVersioned = false,
			ValueType = typeof(String),
		};

		public static Variable Direction = new Variable(ElectricMeter.DirectionParser)
        {
			Name = "Direction",
			IsPeriodic = false,
			IsVersioned = true,
			ValueType = typeof(String),
		};

		public static Variable Integral = new Variable(ElectricMeter.IntegralParser)
        {
			Name = "Integral",
			IsPeriodic = true,
			IsVersioned = true,
			ValueType = typeof(Double),
			EntityType = typeof(ElectricMeter_Integral)
		};

		public static Variable CoeffOfTransformation = new Variable(ElectricMeter.CoeffOfTransformationParser)
        {
			Name = "CoeffOfTransformation",
			IsPeriodic = false,
			IsVersioned = true,
			ValueType = typeof(Double),
		};

		public static Variable AdditionInPercent = new Variable(ElectricMeter.AdditionInPercentParser)
        {
			Name = "AdditionInPercent",
			IsPeriodic = false,
			IsVersioned = true,
			ValueType = typeof(Double),
		};

		public static Variable Addition = new Variable(ElectricMeter.AdditionParser)
        {
			Name = "Addition",
			IsPeriodic = false,
			IsVersioned = true,
			ValueType = typeof(Double),
		};

		public static Variable Odn = new Variable(ElectricMeter.OdnParser)
        {
			Name = "Odn",
			IsPeriodic = false,
			IsVersioned = true,
			ValueType = typeof(Double),
		};
	}
}
