// <autogenerated>
//   This file was generated by T4 code generator BuildMetamodels.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using SeriesEngine.Core;
using SeriesEngine.Core.DataAccess;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;


namespace SeriesEngine.test1
{
    //[Table("msk1.MainHierarchyNodes")]
    public partial class SecondHierarchyNode : NetworkTreeNode
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public SecondHierarchyNode()
        {
            Children = new HashSet<SecondHierarchyNode>();
        }

        public int NetId { get; set; }
        [ForeignKey("NetId")]
        public virtual SecondHierarchyNetwork Network { get; set; }

        public override Network MyNetwork
        {
            get
            {
                return Network;
            }
            set
            {
                Network = (SecondHierarchyNetwork)value;
            }
        }

        public override NetworkTreeNode MyParent
        {
            get
            {
                return Parent;
            }
            set
            {
                Parent = (SecondHierarchyNode)value;
            }
        }

        public int? ParentId { get; set; }

        public virtual SecondHierarchyNode Parent { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SecondHierarchyNode> Children { get; set; }

		public int? Tag { get; set; }


        public int? ObjectA_Id { get; set; }
        public virtual ObjectA ObjectA { get; set; }

        public int? ObjectB_Id { get; set; }
        public virtual ObjectB ObjectB { get; set; }

        public override NamedObject LinkedObject
        {
            get
            {
                if (ObjectA != null)
                {
                    //ObjectA.ObjectModel = ObjectAModel;
                    return ObjectA;
                }
                if (ObjectB != null)
                {
                    //ObjectB.ObjectModel = ObjectBModel;
                    return ObjectB;
                }
                return null;
            }
        }
	}
}

